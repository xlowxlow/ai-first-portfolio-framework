---
// SEO optimization component for better search engine visibility

export interface Props {
  title: string;
  description: string;
  canonical?: string;
  ogImage?: string;
  ogType?: 'website' | 'article' | 'profile';
  twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player';
  keywords?: string[];
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  articleSection?: string;
  articleTags?: string[];
  locale?: string;
  noindex?: boolean;
  nofollow?: boolean;
  structuredData?: any;
}

const {
  title,
  description,
  canonical,
  ogImage = '/images/og-default.jpg',
  ogType = 'website',
  twitterCard = 'summary_large_image',
  keywords = [],
  author,
  publishedTime,
  modifiedTime,
  articleSection,
  articleTags = [],
  locale = 'en_US',
  noindex = false,
  nofollow = false,
  structuredData
} = Astro.props;

// Get the current URL
const currentUrl = canonical || Astro.url.href;
const siteName = 'Developer Portfolio';

// Generate full image URL
const fullImageUrl = new URL(ogImage, Astro.site).href;

// Create robots content
const robotsContent = [
  noindex ? 'noindex' : 'index',
  nofollow ? 'nofollow' : 'follow'
].join(', ');

// Combine all keywords
const allKeywords = [
  ...keywords,
  ...articleTags
].filter(Boolean).join(', ');
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
{author && <meta name="author" content={author} />}
{allKeywords && <meta name="keywords" content={allKeywords} />}
<meta name="robots" content={robotsContent} />

<!-- Canonical URL -->
<link rel="canonical" href={currentUrl} />

<!-- Language and Locale -->
<meta name="language" content={locale.split('_')[0]} />
<meta property="og:locale" content={locale} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={ogType} />
<meta property="og:url" content={currentUrl} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={fullImageUrl} />
<meta property="og:site_name" content={siteName} />

<!-- Article-specific Open Graph tags -->
{ogType === 'article' && (
  <>
    {author && <meta property="article:author" content={author} />}
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    {articleSection && <meta property="article:section" content={articleSection} />}
    {articleTags.map(tag => <meta property="article:tag" content={tag} />)}
  </>
)}

<!-- Twitter -->
<meta property="twitter:card" content={twitterCard} />
<meta property="twitter:url" content={currentUrl} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={fullImageUrl} />
{author && <meta property="twitter:creator" content={author} />}

<!-- Additional SEO Meta Tags -->
<meta name="theme-color" content="#3b82f6" />
<meta name="msapplication-TileColor" content="#3b82f6" />

<!-- Preload critical resources -->
<link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />

<!-- DNS prefetch for external resources -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//fonts.gstatic.com" />

<!-- Structured Data -->
{structuredData && (
  <script type="application/ld+json" set:html={JSON.stringify(structuredData, null, 2)} />
)}

<!-- Additional meta tags for better crawling -->
<meta name="revisit-after" content="7 days" />
<meta name="rating" content="General" />
<meta name="distribution" content="Global" />

<!-- Mobile optimization -->
<meta name="HandheldFriendly" content="True" />
<meta name="MobileOptimized" content="320" />

<!-- Security headers -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-Frame-Options" content="DENY" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />

<!-- Referrer policy -->
<meta name="referrer" content="strict-origin-when-cross-origin" />

<script>
  // Add structured data for breadcrumbs if on a nested page
  if (window.location.pathname !== '/') {
    const pathSegments = window.location.pathname.split('/').filter(Boolean);
    
    if (pathSegments.length > 0) {
      const breadcrumbList = {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": window.location.origin
          }
        ]
      };

      // Add intermediate breadcrumbs
      let currentPath = '';
      pathSegments.forEach((segment, index) => {
        currentPath += '/' + segment;
        breadcrumbList.itemListElement.push({
          "@type": "ListItem",
          "position": index + 2,
          "name": segment.charAt(0).toUpperCase() + segment.slice(1),
          "item": window.location.origin + currentPath
        });
      });

      // Add breadcrumb structured data
      const script = document.createElement('script');
      script.type = 'application/ld+json';
      script.textContent = JSON.stringify(breadcrumbList);
      document.head.appendChild(script);
    }
  }

  // Track page views for analytics
  if (typeof gtag !== 'undefined') {
    gtag('config', 'GA_MEASUREMENT_ID', {
      page_title: document.title,
      page_location: window.location.href
    });
  }

  // Performance monitoring
  if (typeof performance !== 'undefined' && performance.mark) {
    performance.mark('seo-component-loaded');
  }
</script>