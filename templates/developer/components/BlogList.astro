---
export interface BlogPost {
  id: string;
  title: string;
  excerpt: string;
  content?: string;
  publishedDate: string;
  updatedDate?: string;
  tags: string[];
  category: string;
  readingTime: number;
  featured: boolean;
  slug: string;
  author: {
    name: string;
    avatar?: string;
  };
  coverImage?: string;
  seo?: {
    description: string;
    keywords: string[];
  };
}

export interface Props {
  posts: BlogPost[];
  showFeaturedFirst?: boolean;
  itemsPerPage?: number;
  showCategories?: boolean;
  showTags?: boolean;
  layout?: 'grid' | 'list' | 'masonry';
  showExcerpt?: boolean;
  showReadingTime?: boolean;
  showAuthor?: boolean;
}

const {
  posts,
  showFeaturedFirst = true,
  itemsPerPage = 6,
  showCategories = true,
  showTags = true,
  layout = 'grid',
  showExcerpt = true,
  showReadingTime = true,
  showAuthor = false
} = Astro.props;

// Sort posts: featured first, then by published date
const sortedPosts = [...posts].sort((a, b) => {
  if (showFeaturedFirst) {
    if (a.featured && !b.featured) return -1;
    if (!a.featured && b.featured) return 1;
  }
  return new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime();
});

// Take only the specified number of items
const displayPosts = sortedPosts.slice(0, itemsPerPage);

// Get unique categories and tags for filtering
const categories = [...new Set(posts.map(post => post.category))];
const allTags = [...new Set(posts.flatMap(post => post.tags))];

// Format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<section class="py-16 bg-gray-50 dark:bg-gray-800/50" id="blog">
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Latest Blog Posts
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        Thoughts, tutorials, and insights about web development, technology, and software engineering.
      </p>
    </div>

    <!-- Filter Options -->
    {(showCategories && categories.length > 1) && (
      <div class="flex flex-wrap justify-center gap-2 mb-8">
        <button
          class="filter-btn active px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-blue-600 text-white hover:bg-blue-700"
          data-filter="all"
        >
          All Posts
        </button>
        {categories.map(category => (
          <button
            class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
            data-filter={category.toLowerCase().replace(/\s+/g, '-')}
          >
            {category}
          </button>
        ))}
      </div>
    )}

    <!-- Blog Posts Grid -->
    <div class={`blog-posts ${
      layout === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8' :
      layout === 'masonry' ? 'columns-1 md:columns-2 lg:columns-3 gap-8 space-y-8' :
      'space-y-8'
    }`}>
      {displayPosts.map((post, index) => (
        <article
          class={`blog-card bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 overflow-hidden ${
            layout === 'masonry' ? 'break-inside-avoid mb-8' : ''
          } ${post.featured ? 'ring-2 ring-blue-500 ring-opacity-50' : ''}`}
          data-category={post.category.toLowerCase().replace(/\s+/g, '-')}
        >
          <!-- Cover Image -->
          {post.coverImage && (
            <div class="aspect-video overflow-hidden relative group">
              <img
                src={post.coverImage}
                alt={`Cover image for ${post.title}`}
                loading={index < 3 ? 'eager' : 'lazy'}
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
              
              <!-- Featured Badge -->
              {post.featured && (
                <div class="absolute top-4 left-4">
                  <span class="px-3 py-1 bg-blue-600 text-white text-sm font-medium rounded-full">
                    Featured
                  </span>
                </div>
              )}
              
              <!-- Reading Time -->
              {showReadingTime && (
                <div class="absolute top-4 right-4 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm">
                  {post.readingTime} min read
                </div>
              )}
            </div>
          )}

          <!-- Post Content -->
          <div class="p-6">
            <!-- Category and Date -->
            <div class="flex items-center justify-between mb-3">
              <span class="px-3 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 text-sm font-medium rounded-full">
                {post.category}
              </span>
              <time 
                datetime={post.publishedDate}
                class="text-sm text-gray-500 dark:text-gray-400"
              >
                {formatDate(post.publishedDate)}
              </time>
            </div>

            <!-- Title -->
            <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
              <a href={`/blog/${post.slug}`} class="block">
                {post.title}
              </a>
            </h3>

            <!-- Excerpt -->
            {showExcerpt && (
              <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
                {post.excerpt}
              </p>
            )}

            <!-- Tags -->
            {showTags && post.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-4">
                {post.tags.slice(0, 3).map(tag => (
                  <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors cursor-pointer">
                    #{tag}
                  </span>
                ))}
                {post.tags.length > 3 && (
                  <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 text-xs rounded-md">
                    +{post.tags.length - 3} more
                  </span>
                )}
              </div>
            )}

            <!-- Footer -->
            <div class="flex items-center justify-between">
              <!-- Author -->
              {showAuthor && (
                <div class="flex items-center">
                  {post.author.avatar && (
                    <img
                      src={post.author.avatar}
                      alt={post.author.name}
                      class="w-6 h-6 rounded-full mr-2"
                      loading="lazy"
                    />
                  )}
                  <span class="text-sm text-gray-600 dark:text-gray-400">
                    {post.author.name}
                  </span>
                </div>
              )}

              <!-- Read More Link -->
              <a
                href={`/blog/${post.slug}`}
                class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium text-sm transition-colors inline-flex items-center group"
              >
                Read More
                <svg class="ml-1 w-4 h-4 transform group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
    </div>

    <!-- Empty State -->
    {displayPosts.length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üìù</div>
        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
          No blog posts yet
        </h3>
        <p class="text-gray-600 dark:text-gray-400">
          Check back soon for new content!
        </p>
      </div>
    )}

    <!-- Load More Button -->
    {posts.length > itemsPerPage && (
      <div class="text-center mt-12">
        <button
          id="load-more-posts"
          class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium inline-flex items-center"
        >
          Load More Posts
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </button>
      </div>
    )}

    <!-- View All Posts Link -->
    <div class="text-center mt-8">
      <a
        href="/blog"
        class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium inline-flex items-center"
      >
        View All Posts
        <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>

    <!-- Newsletter Signup -->
    <div class="mt-16 bg-white dark:bg-gray-800 rounded-xl p-8 text-center shadow-lg">
      <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
        Stay Updated
      </h3>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Subscribe to get notified about new blog posts and updates.
      </p>
      <form class="max-w-md mx-auto">
        <div class="flex gap-4">
          <input
            type="email"
            placeholder="Enter your email"
            required
            class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
          />
          <button
            type="submit"
            class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium whitespace-nowrap"
          >
            Subscribe
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<!-- JSON-LD Structured Data for Blog Posts -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Blog",
  "blogPost": displayPosts.map(post => ({
    "@type": "BlogPosting",
    "headline": post.title,
    "description": post.excerpt,
    "author": {
      "@type": "Person",
      "name": post.author.name
    },
    "datePublished": post.publishedDate,
    "dateModified": post.updatedDate || post.publishedDate,
    "keywords": post.tags.join(", "),
    "articleSection": post.category,
    "wordCount": Math.round(post.readingTime * 250), // Estimate word count
    "url": `/blog/${post.slug}`,
    ...(post.coverImage && {
      "image": {
        "@type": "ImageObject",
        "url": post.coverImage
      }
    })
  }))
})} />

<script>
  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const blogCards = document.querySelectorAll('.blog-card');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active', 'bg-blue-600', 'text-white'));
      filterButtons.forEach(btn => btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300'));
      
      button.classList.add('active', 'bg-blue-600', 'text-white');
      button.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
      
      // Filter blog posts
      blogCards.forEach(card => {
        if (filter === 'all' || card.getAttribute('data-category') === filter) {
          card.style.display = 'block';
          card.classList.add('animate-fadeIn');
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
  
  // Intersection Observer for animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-slideUp');
      }
    });
  }, observerOptions);
  
  // Observe blog cards for animations
  blogCards.forEach(card => {
    observer.observe(card);
  });
  
  // Load more functionality
  const loadMoreBtn = document.getElementById('load-more-posts');
  if (loadMoreBtn) {
    let currentPage = 1;
    const postsPerPage = 6;
    
    loadMoreBtn.addEventListener('click', async () => {
      currentPage++;
      
      try {
        // This would typically fetch more posts from an API
        // For now, we'll simulate the loading
        loadMoreBtn.innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Loading...
        `;
        
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Reset button
        loadMoreBtn.innerHTML = `
          Load More Posts
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        `;
        
      } catch (error) {
        console.error('Error loading more posts:', error);
        loadMoreBtn.textContent = 'Error loading posts';
      }
    });
  }
  
  // Newsletter signup
  const newsletterForm = document.querySelector('form');
  if (newsletterForm) {
    newsletterForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = e.target.querySelector('input[type="email"]').value;
      const button = e.target.querySelector('button');
      
      button.textContent = 'Subscribing...';
      button.disabled = true;
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Show success message
        button.textContent = 'Subscribed!';
        button.className = button.className.replace('bg-blue-600 hover:bg-blue-700', 'bg-green-600');
        
        // Reset form
        setTimeout(() => {
          e.target.reset();
          button.textContent = 'Subscribe';
          button.disabled = false;
          button.className = button.className.replace('bg-green-600', 'bg-blue-600 hover:bg-blue-700');
        }, 2000);
        
      } catch (error) {
        button.textContent = 'Error';
        button.disabled = false;
        console.error('Newsletter signup error:', error);
      }
    });
  }
  
  // Tag hover effects
  document.querySelectorAll('[class*="px-2 py-1"]').forEach(tag => {
    if (tag.textContent.startsWith('#')) {
      tag.addEventListener('click', () => {
        // Could implement tag filtering here
        console.log('Filter by tag:', tag.textContent);
      });
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .animate-slideUp {
    animation: slideUp 0.6s ease-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Masonry layout support */
  .columns-1 { column-count: 1; }
  .columns-2 { column-count: 2; }
  .columns-3 { column-count: 3; }
  
  @media (max-width: 768px) {
    .columns-2 { column-count: 1; }
    .columns-3 { column-count: 1; }
  }
  
  @media (max-width: 1024px) {
    .columns-3 { column-count: 2; }
  }
  
  .break-inside-avoid {
    break-inside: avoid;
    page-break-inside: avoid;
  }
  
  /* Blog card hover effects */
  .blog-card {
    transition: all 0.3s ease;
  }
  
  .blog-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  .dark .blog-card:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
  }
  
  /* Newsletter form styling */
  input:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
  
  .dark input:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }
</style>