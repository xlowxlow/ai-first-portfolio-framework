---
import type { Skill } from '../../../src/config/portfolio.config';

export interface Props {
  skills: Skill[];
  displayType?: 'bars' | 'circles' | 'tags' | 'grid';
  groupByCategory?: boolean;
  showProficiencyLevel?: boolean;
  showYearsOfExperience?: boolean;
  showIcons?: boolean;
  maxItemsPerCategory?: number;
}

const {
  skills,
  displayType = 'bars',
  groupByCategory = true,
  showProficiencyLevel = true,
  showYearsOfExperience = false,
  showIcons = true,
  maxItemsPerCategory = 8
} = Astro.props;

// Group skills by category
const skillsByCategory = skills.reduce((acc, skill) => {
  if (!acc[skill.category]) {
    acc[skill.category] = [];
  }
  acc[skill.category].push(skill);
  return acc;
}, {} as Record<string, Skill[]>);

// Sort categories and limit skills per category
Object.keys(skillsByCategory).forEach(category => {
  skillsByCategory[category] = skillsByCategory[category]
    .sort((a, b) => {
      // Sort by level first, then by years of experience, then alphabetically
      const levelOrder = { 'Expert': 4, 'Advanced': 3, 'Intermediate': 2, 'Beginner': 1 };
      if (levelOrder[a.level] !== levelOrder[b.level]) {
        return levelOrder[b.level] - levelOrder[a.level];
      }
      if (a.yearsOfExperience !== b.yearsOfExperience) {
        return (b.yearsOfExperience || 0) - (a.yearsOfExperience || 0);
      }
      return a.name.localeCompare(b.name);
    })
    .slice(0, maxItemsPerCategory);
});

// Convert skill level to percentage
const getLevelPercentage = (level: string): number => {
  const levelMap = {
    'Beginner': 25,
    'Intermediate': 50,
    'Advanced': 75,
    'Expert': 90
  };
  return levelMap[level as keyof typeof levelMap] || 50;
};

// Get color based on skill level
const getLevelColor = (level: string): string => {
  const colorMap = {
    'Beginner': 'from-red-400 to-red-600',
    'Intermediate': 'from-yellow-400 to-yellow-600',
    'Advanced': 'from-blue-400 to-blue-600',
    'Expert': 'from-green-400 to-green-600'
  };
  return colorMap[level as keyof typeof colorMap] || 'from-gray-400 to-gray-600';
};

// Get skill category icon
const getCategoryIcon = (category: string): string => {
  const iconMap = {
    'Frontend': 'üé®',
    'Backend': '‚öôÔ∏è',
    'Database': 'üóÑÔ∏è',
    'DevOps': 'üöÄ',
    'Mobile': 'üì±',
    'AI/ML': 'ü§ñ',
    'Design': '‚ú®',
    'Other': 'üõ†Ô∏è'
  };
  return iconMap[category as keyof typeof iconMap] || 'üõ†Ô∏è';
};
---

<section class="py-16 bg-white dark:bg-gray-900" id="skills">
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Skills & Expertise
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        A comprehensive overview of my technical skills and proficiency levels across different domains.
      </p>
    </div>

    {groupByCategory ? (
      <!-- Grouped by Category Display -->
      <div class="space-y-12">
        {Object.entries(skillsByCategory).map(([category, categorySkills]) => (
          <div class="skills-category">
            <!-- Category Header -->
            <div class="flex items-center mb-6">
              {showIcons && (
                <span class="text-2xl mr-3" aria-hidden="true">
                  {getCategoryIcon(category)}
                </span>
              )}
              <h3 class="text-2xl font-semibold text-gray-900 dark:text-white">
                {category}
              </h3>
              <div class="flex-1 h-px bg-gradient-to-r from-gray-300 to-transparent dark:from-gray-600 ml-4"></div>
            </div>

            {displayType === 'bars' && (
              <div class="grid gap-4">
                {categorySkills.map((skill) => (
                  <div class="skill-item">
                    <div class="flex justify-between items-center mb-2">
                      <h4 class="font-medium text-gray-900 dark:text-white">
                        {skill.name}
                      </h4>
                      <div class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                        {showProficiencyLevel && (
                          <span class={`px-2 py-1 rounded text-xs font-medium ${
                            skill.level === 'Expert' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
                            skill.level === 'Advanced' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' :
                            skill.level === 'Intermediate' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' :
                            'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
                          }`}>
                            {skill.level}
                          </span>
                        )}
                        {showYearsOfExperience && skill.yearsOfExperience && (
                          <span>{skill.yearsOfExperience}y</span>
                        )}
                      </div>
                    </div>
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden">
                      <div
                        class={`h-full bg-gradient-to-r ${getLevelColor(skill.level)} rounded-full transition-all duration-1000 ease-out skill-bar`}
                        style={`width: ${getLevelPercentage(skill.level)}%`}
                        role="progressbar"
                        aria-valuenow={getLevelPercentage(skill.level)}
                        aria-valuemin="0"
                        aria-valuemax="100"
                        aria-label={`${skill.name} proficiency: ${skill.level}`}
                      >
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {displayType === 'circles' && (
              <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {categorySkills.map((skill) => (
                  <div class="skill-circle text-center">
                    <div class="relative w-20 h-20 mx-auto mb-3">
                      <svg class="w-20 h-20 transform -rotate-90" viewBox="0 0 36 36">
                        <path
                          d="m18,2.0845 a 15.9155,15.9155 0 0,1 0,31.831 a 15.9155,15.9155 0 0,1 0,-31.831"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          class="text-gray-200 dark:text-gray-700"
                        />
                        <path
                          d="m18,2.0845 a 15.9155,15.9155 0 0,1 0,31.831 a 15.9155,15.9155 0 0,1 0,-31.831"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-dasharray={`${getLevelPercentage(skill.level)}, 100`}
                          class={`skill-circle-progress ${
                            skill.level === 'Expert' ? 'text-green-500' :
                            skill.level === 'Advanced' ? 'text-blue-500' :
                            skill.level === 'Intermediate' ? 'text-yellow-500' :
                            'text-red-500'
                          }`}
                        />
                      </svg>
                      <div class="absolute inset-0 flex items-center justify-center">
                        <span class="text-sm font-semibold text-gray-900 dark:text-white">
                          {getLevelPercentage(skill.level)}%
                        </span>
                      </div>
                    </div>
                    <h4 class="font-medium text-gray-900 dark:text-white text-sm mb-1">
                      {skill.name}
                    </h4>
                    {showProficiencyLevel && (
                      <p class="text-xs text-gray-600 dark:text-gray-400">
                        {skill.level}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            )}

            {displayType === 'tags' && (
              <div class="flex flex-wrap gap-3">
                {categorySkills.map((skill) => (
                  <div class={`skill-tag px-4 py-2 rounded-full border-2 transition-all duration-300 hover:scale-105 cursor-default ${
                    skill.level === 'Expert' ? 'bg-green-50 border-green-200 text-green-800 dark:bg-green-900/20 dark:border-green-700 dark:text-green-300' :
                    skill.level === 'Advanced' ? 'bg-blue-50 border-blue-200 text-blue-800 dark:bg-blue-900/20 dark:border-blue-700 dark:text-blue-300' :
                    skill.level === 'Intermediate' ? 'bg-yellow-50 border-yellow-200 text-yellow-800 dark:bg-yellow-900/20 dark:border-yellow-700 dark:text-yellow-300' :
                    'bg-red-50 border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-700 dark:text-red-300'
                  }`}>
                    <span class="font-medium">{skill.name}</span>
                    {showProficiencyLevel && (
                      <span class="ml-2 text-xs opacity-75">
                        {skill.level}
                      </span>
                    )}
                    {showYearsOfExperience && skill.yearsOfExperience && (
                      <span class="ml-1 text-xs opacity-75">
                        ({skill.yearsOfExperience}y)
                      </span>
                    )}
                  </div>
                ))}
              </div>
            )}

            {displayType === 'grid' && (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {categorySkills.map((skill) => (
                  <div class="skill-card bg-gray-50 dark:bg-gray-800 rounded-lg p-4 hover:shadow-md transition-shadow duration-300">
                    <div class="flex items-center justify-between mb-2">
                      <h4 class="font-semibold text-gray-900 dark:text-white">
                        {skill.name}
                      </h4>
                      <div class={`w-3 h-3 rounded-full ${
                        skill.level === 'Expert' ? 'bg-green-500' :
                        skill.level === 'Advanced' ? 'bg-blue-500' :
                        skill.level === 'Intermediate' ? 'bg-yellow-500' :
                        'bg-red-500'
                      }`} aria-label={skill.level}></div>
                    </div>
                    <div class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
                      {showProficiencyLevel && (
                        <span>{skill.level}</span>
                      )}
                      {showYearsOfExperience && skill.yearsOfExperience && (
                        <span>{skill.yearsOfExperience} years</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    ) : (
      <!-- Flat Display (All Skills Together) -->
      <div class={`skills-container ${
        displayType === 'tags' ? 'flex flex-wrap gap-3 justify-center' :
        displayType === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6' :
        displayType === 'circles' ? 'grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6' :
        'space-y-4'
      }`}>
        {/* Render all skills in selected format without grouping */}
        {skills.map((skill) => (
          <!-- Same rendering logic as above but without category headers -->
          <div class="skill-item">
            {/* Individual skill rendering based on displayType */}
          </div>
        ))}
      </div>
    )}

    <!-- Skills Summary Stats -->
    <div class="mt-16 bg-gray-50 dark:bg-gray-800 rounded-xl p-8">
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
        <div class="stat-item">
          <div class="text-2xl md:text-3xl font-bold text-blue-600 dark:text-blue-400">
            {skills.length}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Total Skills
          </div>
        </div>
        <div class="stat-item">
          <div class="text-2xl md:text-3xl font-bold text-green-600 dark:text-green-400">
            {skills.filter(s => s.level === 'Expert').length}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Expert Level
          </div>
        </div>
        <div class="stat-item">
          <div class="text-2xl md:text-3xl font-bold text-purple-600 dark:text-purple-400">
            {Object.keys(skillsByCategory).length}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Categories
          </div>
        </div>
        <div class="stat-item">
          <div class="text-2xl md:text-3xl font-bold text-orange-600 dark:text-orange-400">
            {Math.round(skills.reduce((acc, skill) => acc + (skill.yearsOfExperience || 0), 0) / skills.length) || 0}
          </div>
          <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Avg. Years
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- JSON-LD Structured Data for Skills -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Person",
  "knowsAbout": skills.map(skill => skill.name),
  "hasOccupation": {
    "@type": "Occupation",
    "name": "Software Developer",
    "skills": skills.map(skill => ({
      "@type": "DefinedTerm",
      "name": skill.name,
      "inDefinedTermSet": skill.category
    }))
  }
})} />

<script>
  // Animate skill bars on scroll
  const observeSkills = () => {
    const skillBars = document.querySelectorAll('.skill-bar');
    const skillCircles = document.querySelectorAll('.skill-circle-progress');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate bars
          if (entry.target.classList.contains('skill-bar')) {
            entry.target.style.width = '0%';
            const targetWidth = entry.target.getAttribute('style').match(/width:\s*(\d+)%/)[1];
            setTimeout(() => {
              entry.target.style.width = `${targetWidth}%`;
            }, 100);
          }
          
          // Animate circles
          if (entry.target.classList.contains('skill-circle-progress')) {
            entry.target.style.strokeDasharray = '0, 100';
            const targetDash = entry.target.getAttribute('stroke-dasharray');
            setTimeout(() => {
              entry.target.style.strokeDasharray = targetDash;
            }, 100);
          }
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    });
    
    skillBars.forEach(bar => observer.observe(bar));
    skillCircles.forEach(circle => observer.observe(circle));
  };
  
  // Initialize animations when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeSkills);
  } else {
    observeSkills();
  }
  
  // Add hover effects for skill tags
  document.querySelectorAll('.skill-tag').forEach(tag => {
    tag.addEventListener('mouseenter', () => {
      tag.style.transform = 'scale(1.05)';
    });
    
    tag.addEventListener('mouseleave', () => {
      tag.style.transform = 'scale(1)';
    });
  });
</script>

<style>
  .skill-bar {
    transform-origin: left;
    transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .skill-circle-progress {
    transition: stroke-dasharray 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .skill-tag {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .skill-tag:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  .dark .skill-tag:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
  .skill-card {
    transition: all 0.3s ease;
  }
  
  .skill-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }
  
  .dark .skill-card:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  .skills-category {
    opacity: 0;
    transform: translateY(20px);
    animation: slideInUp 0.6s ease-out forwards;
  }
  
  .skills-category:nth-child(2) { animation-delay: 0.1s; }
  .skills-category:nth-child(3) { animation-delay: 0.2s; }
  .skills-category:nth-child(4) { animation-delay: 0.3s; }
  .skills-category:nth-child(5) { animation-delay: 0.4s; }
  
  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .stat-item {
    opacity: 0;
    transform: scale(0.8);
    animation: scaleIn 0.5s ease-out forwards;
  }
  
  .stat-item:nth-child(1) { animation-delay: 0.1s; }
  .stat-item:nth-child(2) { animation-delay: 0.2s; }
  .stat-item:nth-child(3) { animation-delay: 0.3s; }
  .stat-item:nth-child(4) { animation-delay: 0.4s; }
  
  @keyframes scaleIn {
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>