---
import { Picture } from 'astro:assets';
import type { Project } from '../../../src/config/portfolio.config';

export interface Props {
  projects: Project[];
  showFilters?: boolean;
  itemsPerPage?: number;
  layout?: 'grid' | 'masonry' | 'list';
  showFeaturedFirst?: boolean;
}

const {
  projects,
  showFilters = true,
  itemsPerPage = 6,
  layout = 'grid',
  showFeaturedFirst = true
} = Astro.props;

// Get unique categories for filtering
const categories = [...new Set(projects.map(project => project.category))];

// Sort projects: featured first, then by date
const sortedProjects = [...projects].sort((a, b) => {
  if (showFeaturedFirst) {
    // Assuming featured projects have status 'Featured' or are marked somehow
    const aFeatured = a.status === 'Featured' || a.features?.includes('featured');
    const bFeatured = b.status === 'Featured' || b.features?.includes('featured');
    
    if (aFeatured && !bFeatured) return -1;
    if (!aFeatured && bFeatured) return 1;
  }
  
  // Sort by start date (newest first)
  return new Date(b.startDate).getTime() - new Date(a.startDate).getTime();
});

// Take only the specified number of items
const displayProjects = sortedProjects.slice(0, itemsPerPage);
---

<section class="py-16 bg-gray-50 dark:bg-gray-800/50" id="projects">
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Featured Projects
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        A showcase of my recent work and side projects. Each project represents a unique challenge and learning experience.
      </p>
    </div>
    
    <!-- Filter Buttons -->
    {showFilters && categories.length > 1 && (
      <div class="flex flex-wrap justify-center gap-2 mb-8">
        <button
          class="filter-btn active px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-blue-600 text-white hover:bg-blue-700"
          data-filter="all"
        >
          All Projects
        </button>
        {categories.map(category => (
          <button
            class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
            data-filter={category.toLowerCase().replace(/\s+/g, '-')}
          >
            {category}
          </button>
        ))}
      </div>
    )}
    
    <!-- Projects Grid -->
    <div class={`projects-container ${
      layout === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8' :
      layout === 'masonry' ? 'columns-1 md:columns-2 lg:columns-3 gap-8 space-y-8' :
      'space-y-8'
    }`}>
      {displayProjects.map((project) => (
        <article
          class={`project-card bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 overflow-hidden ${
            layout === 'masonry' ? 'break-inside-avoid mb-8' : ''
          }`}
          data-category={project.category.toLowerCase().replace(/\s+/g, '-')}
        >
          <!-- Project Image -->
          {project.imageUrl && (
            <div class="aspect-video overflow-hidden relative group">
              <Picture
                src={project.imageUrl}
                alt={`${project.title} screenshot`}
                width={600}
                height={337}
                format={['webp', 'jpg']}
                loading="lazy"
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
              
              <!-- Overlay with links -->
              <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center space-x-4">
                {project.demoUrl && (
                  <a
                    href={project.demoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                    aria-label={`View ${project.title} demo`}
                  >
                    Live Demo
                  </a>
                )}
                {project.githubUrl && (
                  <a
                    href={project.githubUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors font-medium"
                    aria-label={`View ${project.title} source code`}
                  >
                    Source Code
                  </a>
                )}
              </div>
            </div>
          )}
          
          <!-- Project Content -->
          <div class="p-6">
            <!-- Status Badge -->
            <div class="flex items-center justify-between mb-3">
              <span class={`px-2 py-1 text-xs font-semibold rounded-full ${
                project.status === 'Completed' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' :
                project.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300' :
                'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'
              }`}>
                {project.status}
              </span>
              <span class="text-sm text-gray-500 dark:text-gray-400">
                {project.category}
              </span>
            </div>
            
            <!-- Title and Description -->
            <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-2">
              {project.title}
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
              {project.description}
            </p>
            
            <!-- Features -->
            {project.features.length > 0 && (
              <div class="mb-4">
                <h4 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">
                  Key Features:
                </h4>
                <ul class="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                  {project.features.slice(0, 3).map(feature => (
                    <li class="flex items-center">
                      <svg class="w-4 h-4 text-green-500 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                      </svg>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            <!-- Technology Stack -->
            {project.technologies.length > 0 && (
              <div class="mb-6">
                <div class="flex flex-wrap gap-2">
                  {project.technologies.map(tech => (
                    <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 rounded">
                      {tech}
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Action Links -->
            <div class="flex items-center justify-between">
              <div class="flex space-x-3">
                {project.demoUrl && (
                  <a
                    href={project.demoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium text-sm transition-colors"
                  >
                    View Demo →
                  </a>
                )}
                {project.githubUrl && (
                  <a
                    href={project.githubUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="text-gray-600 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 font-medium text-sm transition-colors"
                  >
                    Source Code →
                  </a>
                )}
              </div>
              
              <!-- Project Date -->
              <time 
                datetime={project.startDate}
                class="text-xs text-gray-500 dark:text-gray-400"
              >
                {new Date(project.startDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short'
                })}
              </time>
            </div>
          </div>
        </article>
      ))}
    </div>
    
    <!-- Load More Button -->
    {projects.length > itemsPerPage && (
      <div class="text-center mt-12">
        <button
          id="load-more-btn"
          class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium inline-flex items-center"
        >
          Load More Projects
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </button>
      </div>
    )}
    
    <!-- View All Projects Link -->
    <div class="text-center mt-8">
      <a
        href="/projects"
        class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium inline-flex items-center"
      >
        View All Projects
        <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</section>

<!-- JSON-LD Structured Data for Projects -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "ItemList",
  "itemListElement": displayProjects.map((project, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@type": "CreativeWork",
      "name": project.title,
      "description": project.description,
      "url": project.demoUrl,
      "codeRepository": project.githubUrl,
      "dateCreated": project.startDate,
      "genre": project.category,
      "keywords": project.technologies.join(", "),
      "programmingLanguage": project.technologies.filter(tech => 
        ['JavaScript', 'TypeScript', 'Python', 'Java', 'Go', 'Rust', 'PHP', 'Ruby'].includes(tech)
      )
    }
  }))
})} />

<script>
  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const projectCards = document.querySelectorAll('.project-card');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active', 'bg-blue-600', 'text-white'));
      filterButtons.forEach(btn => btn.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300'));
      
      button.classList.add('active', 'bg-blue-600', 'text-white');
      button.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
      
      // Filter projects
      projectCards.forEach(card => {
        if (filter === 'all' || card.getAttribute('data-category') === filter) {
          card.style.display = 'block';
          card.classList.add('animate-fadeIn');
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
  
  // Intersection Observer for animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };
  
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-slideUp');
      }
    });
  }, observerOptions);
  
  // Observe project cards for animations
  projectCards.forEach(card => {
    observer.observe(card);
  });
  
  // Load more functionality (if needed)
  const loadMoreBtn = document.getElementById('load-more-btn');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', () => {
      // This would typically load more projects via API
      // For now, it just hides the button
      loadMoreBtn.style.display = 'none';
    });
  }
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .animate-slideUp {
    animation: slideUp 0.6s ease-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Masonry layout support */
  .columns-1 { column-count: 1; }
  .columns-2 { column-count: 2; }
  .columns-3 { column-count: 3; }
  
  @media (max-width: 768px) {
    .columns-2 { column-count: 1; }
    .columns-3 { column-count: 1; }
  }
  
  @media (max-width: 1024px) {
    .columns-3 { column-count: 2; }
  }
  
  .break-inside-avoid {
    break-inside: avoid;
    page-break-inside: avoid;
  }
  
  /* Smooth transitions for filters */
  .project-card {
    transition: all 0.3s ease;
  }
  
  /* Hover effects */
  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  .dark .project-card:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
  }
</style>